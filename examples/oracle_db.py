import oracledb
import configparser


def create_tables(cur):
    try:
        # Create universities table
        cur.execute("""
        CREATE TABLE universities (
            id NUMBER GENERATED BY DEFAULT AS IDENTITY,
            name VARCHAR2(255) NOT NULL,
            PRIMARY KEY (id)
        )
        """)
        # Create universities table
        cur.execute("""
        CREATE TABLE students (
            id NUMBER GENERATED BY DEFAULT AS IDENTITY,
            first_name VARCHAR2(255) NOT NULL,
            last_name VARCHAR2(255) NOT NULL,
            enrolment_date DATE,
            university_id NUMBER,
            PRIMARY KEY (id),
            CONSTRAINT fk_university FOREIGN KEY (university_id) 
            REFERENCES universities(id)
        )
        """)
        return True
    except oracledb.DatabaseError:
        return False


if __name__ == "__main__":
    # Read config
    config = configparser.ConfigParser()
    config.read('db_config.ini')
    user = config['oracle']['user']
    password = config['oracle']['password']
    dsn = config['oracle']['dsn']

    # Connection setup
    connection = oracledb.connect(
        user=user,
        password=password,
        dsn=dsn
    )
    with connection:
        cursor = connection.cursor()
        with cursor:
            if create_tables(cursor):
                print("Tables created.")
            else:
                print("Tables already exist.")

            # Insert data into universities using execute (named placeholders)
            cursor.execute("INSERT INTO universities (name) VALUES (:name)",
                           {"name": "Harvard"})
            cursor.execute("INSERT INTO universities (name) VALUES (:name)",
                           {"name": "MIT"})
            connection.commit()

            # Fetch university IDs
            cursor.execute("SELECT id, name FROM universities")
            universities = {name: uid for uid, name in cursor.fetchall()}

            # Insert data into students using executemany (positional placeholders)
            students = [
                ("Alice", "Johnson", "2024-03-01", universities["Harvard"]),
                ("Bob", "Smith", "2024-03-02", universities["MIT"]),
                ("Charlie", "Brown", "2024-03-03", universities["Harvard"])
            ]
            cursor.executemany("""
            INSERT INTO students (first_name, last_name, enrolment_date, university_id) 
            VALUES (:1, :2, TO_DATE(:3, 'YYYY-MM-DD'), :4)
            """, students)
            connection.commit()

            # Verify inserted data
            cursor.execute("""
            SELECT s.first_name, s.last_name, u.name 
            FROM students s 
            JOIN universities u ON s.university_id = u.id
            """)
            for first_name, last_name, university in cursor:
                print(f"{first_name} {last_name} studies at {university}")
